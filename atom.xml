<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pakchoi!!</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Pakchoi-1.github.io/"/>
  <updated>2019-10-14T02:04:13.935Z</updated>
  <id>https://Pakchoi-1.github.io/</id>
  
  <author>
    <name>Pakchoi-1</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python09</title>
    <link href="https://Pakchoi-1.github.io/2019/10/14/python09/"/>
    <id>https://Pakchoi-1.github.io/2019/10/14/python09/</id>
    <published>2019-10-14T02:01:03.000Z</published>
    <updated>2019-10-14T02:04:13.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Learning"><a href="#Python-Learning" class="headerlink" title="Python  Learning"></a>Python  Learning</h1><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p>type（） #数据类型</p><p>msg1=’hello world’</p><blockquote><p>为什么0. + 0.1 和 0.2 + 0.7 怎么和我们想要的结果不一样？<br>这是因为我们生活中使用的数字都是十进制，在计算机计算的时候会自动转换成<br>二进制的形式(即0和1)， 0.1不会无限循环，而0.2则会变成无线循环的数。运算<br>完成之后再转换成十进制时会对尾部的小数进行截取处理。所以导致了精度的差<br>异，这个在其他语言也是存在的 并不是bug<br>如何解决呢 可以借助Python的Decimal来处理这一问题 </p></blockquote><h2 id="str"><a href="#str" class="headerlink" title="str"></a>str</h2><p>print(‘%s %s’ %(msg1,msg2))</p><p> print(‘{}{}’.format(msg1,msg2)</p><p>print(a + ‘ ‘ + b) # 如 果 多 个 字 符 串 + 号 拼 接 ， 会 创 建 多 个 对 象 ，<br>print(a, b)<br>print(‘%s %s’ % (a, b)) # 推 荐 ， 效 率 高<br>print(‘Hello’’ World’)<br>print(‘{} {}’.format(a, b)) # 推 荐 ， 效 率 高<br>print(‘ ‘.join([‘Hello’, ‘World’])) </p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><blockquote><p>list = [‘f’, ‘e’, ‘a’, ‘d’, ‘b’, ‘w’, ‘c’]         可重复元素</p></blockquote><p>list[0] = ‘f’  获取元素</p><p> list.append(‘q’)    list 末尾添加元素</p><p>list.insert(0,’wang’)  指定位置(不可省缺)添加元素     </p><p> del   list[0]   删除指定元素</p><p>del  list  删除整个list</p><p>list.pop()   弹出指定元素 默认-1 （最后一个）</p><p>len(list)    返回list长度</p><p>‘a’ in list  查询元素是否在list中   是  True   否  F alse</p><p>list  分片/截取</p><p>list[初始索引：终止索引：步长]的方式去完成。步长默认是1 </p><p>list[0:6:2]</p><blockquote><p>list[num:] 表示从num位开始一直到最后，包括num位<br>list[:num] 从起始位置开始，到num位结束，不包括第num位<br>list[num: -1] 表示从num为开始，一直到最后一个，不包括最后一个<br>list[:] 等同于list返回全部<br>list[::-1] 表示num1到num2倒叙排列，如果[::-1]表示全部倒序 </p></blockquote><h4 id="list-相加"><a href="#list-相加" class="headerlink" title="list 相加"></a>list 相加</h4><p>list1 +  list2        产生一个新list     list1，list2不变</p><p>list1.extend(list2)   拼接元素    不会产生新的对象   拼接结果在list1中  list2 不变 </p><p>list.count(‘a’)      统计相同元素个数 </p><p>list.sort()     list 排序   默认升序</p><p>list.sort(reverse=True)    降序</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>集合中的元素不可以重复！！ </p><p>创建set </p><p>name = set()     空集  不能用 {}  </p><p>非空集合创建</p><blockquote><p>name = {‘tom’, ‘lily’, ‘lucy’} </p></blockquote><blockquote><p>name = set([‘tom’, ‘lily’, ‘lucy’]) </p></blockquote><h6 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h6><p>name.add(‘wang’)</p><p>a.update({‘z’, ‘x’}) </p><p>a.update([‘j’,’k’]) </p><p>a.remove(‘b’)    移除</p><p>discard(元素),和remove的区别在于当删除不存在的元素则不会报错 </p><p>a.discard(‘a’) </p><p>a.pop()   集合中随机弹出   不能弹出指定元素</p><h4 id="set-运算"><a href="#set-运算" class="headerlink" title="set 运算"></a>set 运算</h4><blockquote><blockquote><blockquote><p>set1 = {‘a’, ‘b’, ‘c’, ‘d’}<br>set2 = {‘a’, ‘d’, ‘z’, ‘x’}<br>在 集 合 set1 而 不 在 set2 中 的 元 素</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>set1 - set2<br>{‘b’, ‘c’}<br>set1 和 set2 的 所 有 元 素 ， 合 集</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>set1 | set2<br>{‘d’, ‘a’, ‘x’, ‘c’, ‘z’, ‘b’}<br>不 同 时 在 set1 和 set2 的 元 素</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>set1 ^ set2<br>{‘x’, ‘c’, ‘z’, ‘b’}<br>同 时 在 set1 和 set2 的 元 素 , 交 集</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>set1 &amp; set2<br>{‘d’, ‘a’} </p></blockquote></blockquote></blockquote><p>交 集</p><blockquote><blockquote><blockquote><p>set1.intersection(set2)<br>{‘d’, ‘a’}<br>合 集</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>set1.union(set2)<br>{‘d’, ‘a’, ‘x’, ‘c’, ‘z’, ‘b’}<br>差 集</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>set1.difference(set2)<br>{‘b’, ‘c’} </p></blockquote></blockquote></blockquote><p>a.clear()   清空集合</p><p>获取集合的长度，判断元素是否在集合中与上面的列表方法一样。 </p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组和列表基本类似，区别在于元组一旦创建就不能再修改。所以它没有新增修改<br>的方法。这样做能够使数据更安全，如果可以尽量使用tuple(元组) </p><blockquote><p>tuple = (‘a’,’b’)<br>type(tuple)</p><class 'tuple'></class></blockquote><h5 id="仅有1个元素的创建"><a href="#仅有1个元素的创建" class="headerlink" title="仅有1个元素的创建"></a>仅有1个元素的创建</h5><p>只有一个元素创建元组的时候也需要加上逗号， </p><blockquote><p>t = (1,)</p></blockquote><blockquote><p>type(t)</p><p>&lt;class ‘tuple’ </p></blockquote><h4 id="tuple其实也是‘可变’的"><a href="#tuple其实也是‘可变’的" class="headerlink" title="tuple其实也是‘可变’的"></a>tuple其实也是‘可变’的</h4><blockquote><p>list<br>[‘e’, ‘a’, ‘d’, ‘b’, ‘w’, ‘c’]<br>t<br>‘a’<br>t=(‘a’,list)<br>t<br>(‘a’, [‘e’, ‘a’, ‘d’, ‘b’, ‘w’, ‘c’])<br>list[0]=’wang’<br>t<br>(‘a’, [‘wang’, ‘a’, ‘d’, ‘b’, ‘w’, ‘c’])</p></blockquote><p>tuple不可修改，其实指的是它的引用是不可改变，在上面的过程中tuple最后一<br>个元素的引用始终指向的是list，并没有改变。改变的只是list的值 </p><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><h4 id="1、与列表类似。比如通过索引获取元素，切片"><a href="#1、与列表类似。比如通过索引获取元素，切片" class="headerlink" title="1、与列表类似。比如通过索引获取元素，切片"></a>1、与列表类似。比如通过索引获取元素，切片</h4><blockquote><p>t = (‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘a’)<br>t<br>(‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘a’)<br>t[2]<br>‘c’<br>t[-3]<br>‘d’<br>t[1: 2]<br>(‘b’,) </p></blockquote><blockquote><p>t[1: 5]<br>(‘b’, ‘c’, ‘d’, ‘e’)</p></blockquote><blockquote><p>t[5:1: -1]<br>(‘a’, ‘e’, ‘d’, ‘c’) **</p></blockquote><h4 id="元组拼接"><a href="#元组拼接" class="headerlink" title="元组拼接"></a>元组拼接</h4><blockquote><p>t1 = (‘a’, ‘b’, ‘c’)<br>t2 = (‘m’, ‘n’, ‘v’)<br>t1 + t2<br>(‘a’, ‘b’, ‘c’, ‘m’, ‘n’, ‘v’)<br>t1 * 3<br>(‘a’, ‘b’, ‘c’, ‘a’, ‘b’, ‘c’, ‘a’, ‘b’, ‘c’) </p></blockquote><h4 id="循环获取元素"><a href="#循环获取元素" class="headerlink" title="循环获取元素"></a>循环获取元素</h4><blockquote><p>t = (‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘a’)<br>for i in t:<br>… print(i)<br>…<br>a</p><p>b</p><p>c</p><p>d</p><p>e</p><p>a </p></blockquote><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>dict(字典) </p><p>{‘键’: ‘值’， ‘键’: ‘值’， ‘键’: ‘值’} </p><p>dict1 = {}   创建空字典</p><p>dict2 = {‘name’: ‘xiaoming’, ‘age’: 18} </p><h5 id="修改字典的值"><a href="#修改字典的值" class="headerlink" title="修改字典的值"></a>修改字典的值</h5><p>一 个 key 只 能 对 应 一 个 value ， 当 再 次 给 某 个 key 赋 值 的 时 候 回 覆 盖 掉 旧 值 ，<br>所以可以理解为键是唯一的，但是值并不是，而且值可以是任何一种数据类型。 </p><blockquote><p>dict2 = {‘name’: ‘xiaoming’, ‘age’: 18}<br>dict2[‘name’]<br>‘xiaoming’<br>dict2[‘name’] = ‘lily’<br>dict2<br>{‘name’: ‘lily’, ‘age’: 18} </p></blockquote><p>新增字典的值   （跟修改写法一致 ）</p><blockquote><p>dict2 = {‘name’: ‘xiaoming’, ‘age’: 18}<br>dict2[‘sex’] = 1<br>dict2 {‘name’: ‘xiaoming’, ‘age’: 18, ‘sex’: 1} </p></blockquote><h5 id="删除字典"><a href="#删除字典" class="headerlink" title="删除字典"></a>删除字典</h5><p>del和pop(删除并返回) </p><blockquote><p>dict2 = {‘name’: ‘xiaoming’, ‘age’: 18}<br>del dict2[‘name’]<br>dict2<br>{‘age’: 18}<br>dict2 = {‘name’: ‘xiaoming’, ‘age’: 18}<br>dict2.pop(‘name’)<br>‘xiaoming’<br>dict2<br>{‘age’: 18} </p></blockquote><h5 id="字典合并"><a href="#字典合并" class="headerlink" title="字典合并"></a>字典合并</h5><p>两个字典通过update的方法进行合并 </p><blockquote><p>dict1 = {‘A’: ‘a’, ‘B’: ‘b’}<br>dict2 = {‘M’: ‘m’, ‘N’: ‘n’} </p><p>将 dict2 合 并 到 dict1</p></blockquote><blockquote><p>dict1.update(dict2)<br>dict1<br>{‘A’: ‘a’, ‘B’: ‘b’, ‘M’: ‘m’, ‘N’: ‘n’} </p></blockquote><h5 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h5><p>1、 获取字典的所有key </p><blockquote><p>dict2 = {‘name’: ‘xiaoming’, ‘age’: 18}<br>dict2.keys()<br>dict_keys([‘name’, ‘age’]) </p></blockquote><p>2、返回字典的所有value </p><blockquote><p>dict2 = {‘name’: ‘xiaoming’, ‘age’: 18}<br>dict2.values()<br>dict_values([‘xiaoming’, 18]) </p></blockquote><p>3、返回字典的所有键和值 </p><blockquote><p>dict2 = {‘name’: ‘xiaoming’, ‘age’: 18}<br>dict2.items()<br>dict_items([(‘name’, ‘xiaoming’), (‘age’, 18)]) </p></blockquote><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-Learning&quot;&gt;&lt;a href=&quot;#Python-Learning&quot; class=&quot;headerlink&quot; title=&quot;Python  Learning&quot;&gt;&lt;/a&gt;Python  Learning&lt;/h1&gt;&lt;h3 id=&quot;number&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ESP8266_Learning快速上手</title>
    <link href="https://Pakchoi-1.github.io/2019/07/17/esp8266%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>https://Pakchoi-1.github.io/2019/07/17/esp8266快速上手/</id>
    <published>2019-07-16T17:19:14.000Z</published>
    <updated>2019-07-17T17:19:31.311Z</updated>
    
    <content type="html"><![CDATA[<p> 最近学习了wifi模组的esp8266WiFi模块 这里总结了一些快速上手的教程</p><p>一是能帮助一些初学者</p><p>二以便自己以后查看。 <a id="more"></a></p><h3 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h3><p><a href="https://wiki.ai-thinker.com/_media/esp8266/docs/esp8266_series_modules_user_manual_cn.pdf" target="_blank" rel="noopener">按需求参考此文档</a></p><h3 id="上电基本测试"><a href="#上电基本测试" class="headerlink" title="上电基本测试"></a>上电基本测试</h3><p>一般情况刚买的模组是已经烧写好了固件的，就是说模组到手了后没意外或别的需求是不需要重烧固件的如有需求</p><p>请移步 <a href="http://bbs.ai-thinker.com/forum.php?mod=viewthread&amp;tid=8&amp;extra=page%3D1" target="_blank" rel="noopener">烧录教程</a></p><p>若无调试工具请自行到安信可科技下载 <a href="https://wiki.ai-thinker.com/tools" target="_blank" rel="noopener">开发工具清单</a></p><blockquote><p>AT-&gt;ok<br>AT+GMR-&gt;返回版本信息<br>AT+RST-&gt;复位<br>AT+RESTORE-&gt;恢复出厂设置</p></blockquote><p><img src="/2019/07/17/esp8266快速上手/初始.png" alt="初始"></p><h2 id="STA模式（AT-CWMODE-1）"><a href="#STA模式（AT-CWMODE-1）" class="headerlink" title="STA模式（AT+CWMODE=1）"></a>STA模式（AT+CWMODE=1）</h2><p>串口无线 STA（COM-WIFI STA） 模式，模块作为无线 WIFI STA， 用于连接到无线网<br>络，实现串口与其他设备之间的无线（WIFI） 数据转换互传。该模式下，根据应用场景的<br>不同，可以设置 3 个子模式： TCP 服务器、 TCP 客户端， UDP </p><p>此时8266作为TCP服务器</p><blockquote><table><thead><tr><th>AT指令</th><th>作用</th></tr></thead><tbody><tr><td>AT+CWMODE=1</td><td>STA模式</td></tr><tr><td>AT+CWJAP_DEF=”AAAAA”,”12345678”</td><td>连接对象路由器的 ssid 和password</td></tr><tr><td>AT+CIPMUX=1</td><td>开启多连接</td></tr><tr><td>AT+CIPSERVER=1,8080</td><td>开启服务器，端口号为 8080</td></tr><tr><td>AT+CIPSEND=0,25</td><td>向 ID0 发送 25 字节的数据</td></tr></tbody></table></blockquote><h2 id="AP模式-AT-CWMODE-2"><a href="#AP模式-AT-CWMODE-2" class="headerlink" title="AP模式(AT+CWMODE=2)"></a>AP模式(AT+CWMODE=2)</h2><p>我们把模组配置成server 手机配置成client</p><p>此时8266作为TCP服务器</p><blockquote><table><thead><tr><th>AT指令</th><th>作用</th></tr></thead><tbody><tr><td>AT+CWMODE=2</td><td>AP模式   （模块作 TCP server）</td></tr><tr><td>AT+CWSAP=”ESP8266”,”0123456789”,2,3</td><td>创建wifi（ESP8266）,密码，通道号，加密方式</td></tr><tr><td>AT+CIPMUX=1</td><td>开启多连接</td></tr><tr><td>AT+CIPSERVER=1,8080</td><td>开启服务器，端口号为 8080（手机/电脑连接此热点）</td></tr><tr><td>AT+CIPSEND=0,5</td><td>传输连接的 id ，发送数据的长度（最大2048）</td></tr></tbody></table><p>注：模组AP模式  默认的IP是192.168.4.1 可以用AT+CIFSR 查看mac地址和IP</p></blockquote><p><img src="/2019/07/17/esp8266快速上手/AP_1.png" alt="AP_模块服务器模式"></p><p><img src="/2019/07/17/esp8266快速上手/AP_2.png" alt="串口AT指令"></p><h2 id="AP-STA模式-AT-CWMODE-3"><a href="#AP-STA模式-AT-CWMODE-3" class="headerlink" title="AP+STA模式(AT+CWMODE=3)"></a>AP+STA模式(AT+CWMODE=3)</h2><p>模组的tcp透传（配置成server不能用透传）<br>首先，把手机接入到一个路由，建议路由不要用 中文名字。<br>这里我们把8266配置成client ，手机软件/电脑开启tcp server，完成tcp的透传</p><p>此时模组工作在TCP 客户端模式</p><blockquote><table><thead><tr><th>AT指令</th><th>作用</th></tr></thead><tbody><tr><td>AT+CWMODE=3</td><td>AP+STA模式</td></tr><tr><td>AT+CWJAP_DEF=”mm8”,”123456789”</td><td>连接对象路由器的 ssid 和password（客户端连接wifi，并开启tcp sever 模式连接）</td></tr><tr><td>AT+CIPSTART=”TCP”,”192.168.43.41”,8080</td><td>手机/电脑的ip port</td></tr><tr><td>AT+CIPMODE=1</td><td>开启透传模式（仅单连接 client 时支持）</td></tr><tr><td>AT+CIPSEND</td><td>开始发送数据</td></tr></tbody></table></blockquote><p><img src="/2019/07/17/esp8266快速上手/AP+STA_1.jpg" alt="TCP_sever 手机/电脑client"></p><p><img src="/2019/07/17/esp8266快速上手/AP+STA_2.jpg" alt="串口AT指令"></p><h3 id="连接安信可透传云"><a href="#连接安信可透传云" class="headerlink" title="连接安信可透传云"></a>连接安信可透传云</h3><p><a href="http://tt.ai-thinker.com:8000/ttcloud" target="_blank" rel="noopener">安信可透传云地址</a></p><table><thead><tr><th>AT指令</th><th>作用</th></tr></thead><tbody><tr><td>AT+CWMODE=1</td><td>STA模式</td></tr><tr><td>AT+CWJAP_DEF=”mm8”,”123456789”</td><td>连接对象路由器的 ssid 和password</td></tr><tr><td>AT+CIPMUX=0</td><td>单连接模式</td></tr><tr><td>AT+CIPMODE=1</td><td>透传模式</td></tr><tr><td>AT+CIPSTART=”TCP”,”22.114.122.174 “,37599</td><td>远程云sever IP，端口</td></tr><tr><td>AT+CIPSEND</td><td>进入透传</td></tr></tbody></table><p><img src="/2019/07/17/esp8266快速上手/透传云.png" alt="透传云"></p><p>本文章仅供交流学习</p><p><a href="http://bbs.ai-thinker.com/forum.php?mod=viewthread&amp;t&amp;tid=15extra=page%3D1" target="_blank" rel="noopener">本文参考文章</a></p><p><a href="https://wiki.ai-thinker.com/esp8266" target="_blank" rel="noopener">若要查找更多的资料请参考</a></p><p>——-文章中图片均来源于网络如有侵权请联系作者删除</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 最近学习了wifi模组的esp8266WiFi模块 这里总结了一些快速上手的教程&lt;/p&gt;
&lt;p&gt;一是能帮助一些初学者&lt;/p&gt;
&lt;p&gt;二以便自己以后查看。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pakchoi-1&#39;s first blog 一些个人说明</title>
    <link href="https://Pakchoi-1.github.io/2019/04/10/Pakchoi-1&#39;s%20first%20blog/"/>
    <id>https://Pakchoi-1.github.io/2019/04/10/Pakchoi-1&#39;s first blog/</id>
    <published>2019-04-09T17:47:13.000Z</published>
    <updated>2019-04-09T17:59:05.187Z</updated>
    
    <content type="html"><![CDATA[<p>   唔。。。当初在一公众号上看到这样一篇文章 <a href>如何用hexo+github 搭建一个属于自己的博客</a></p><p>看着就激动，因为渐渐的了解IT行业发现有很多的大牛级别人物都喜欢将自己的东西分享到个人博客中，一是为了方便自己后面回来察看，二是将自己的东西分享给更多人为别人解决问题或是学习提供了一种可能，<a id="more"></a>三自然是个人会获一点利吧。当时我一激动就想建一个自己的博客，就算没有人看，我自己记录一些自己东西学习经历呀什么的也行。通过这么多年的了解也明白了IT这个行业跟其他行业不同不能够吃老本，不进则退，这是这是自然法则。</p><p>  现在来说说我建了这个博客都一个月多了为什么现在才开始写博客，那是以为懒^_^ 还有就是不明白我到底该用这个博客来干嘛，这些都还没想好，所以干脆连域名都没有去买虽热哪些“乱七八糟”“各种各样”的域名也不贵甚至说很便宜几块钱一年，但个人嫌麻烦没有弄，还有我这博客也就自己看看就没必要去花钱。</p><p>  然后呢来说说我本人和这个博客的余生，一小二本学生，专业跟IT行业沾点边算半个IT人吧，家穷，人懒，有想法，喜欢一些新奇的东西，较内向。就这么多吧 嘿嘿。这博客呢才刚开始写，就利用它来记录我的学习吧，学过一点python（python真的很有意思），现在已经到了从入门到放弃的地步了，平时专业事情比较多（可能是我找的借口）没怎么花时间来学习。希望我能用写博客来激励自己去学习。</p><p>  好呢就这么多了吧，本人并不喜欢写作，这也算是一种锻炼吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   唔。。。当初在一公众号上看到这样一篇文章 &lt;a href&gt;如何用hexo+github 搭建一个属于自己的博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看着就激动，因为渐渐的了解IT行业发现有很多的大牛级别人物都喜欢将自己的东西分享到个人博客中，一是为了方便自己后面回来察看，二是将自己的东西分享给更多人为别人解决问题或是学习提供了一种可能，&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="https://Pakchoi-1.github.io/2019/04/10/frist%20blog/"/>
    <id>https://Pakchoi-1.github.io/2019/04/10/frist blog/</id>
    <published>2019-04-09T17:47:13.000Z</published>
    <updated>2019-04-09T17:59:33.244Z</updated>
    
    <content type="html"><![CDATA[<p>　　自从在一个学习 python 的公众号看到一篇利用 git＋hexo 搭建属于自己的博客后，想自己搭建有个自己的博客，在这个浩瀚如烟的网络中有一个属于自己的天地。<a id="more"></a></p><p>　　搭建博客那么久了依然没有用它发过一篇，不是不想，一是不知道用这个博客来做些什么，二是本人写作水平有限，现在想明白了，本人是非计算机专业的电子专业的一个小二本在校生，但个人爱好 python 打算用这个博客分享些 python 有趣的实战项目等一些小东西，本人学习 Python 有一段时间了，想学 Python 是因为它入门简单具有非常丰富的库，实现很多复杂的功能只需要直接调用库然后简单的几句代码就能实现想要的功能。同时同样的一个功能 C 要 1000 行代码，java 要 100 行   ，Python 只需要 10 行。同时 Python 还能干很多事 Web，爬虫，数据分析，运维等。我学 Python 的初衷就是为了能够用爬虫爬取自己想要的信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　自从在一个学习 python 的公众号看到一篇利用 git＋hexo 搭建属于自己的博客后，想自己搭建有个自己的博客，在这个浩瀚如烟的网络中有一个属于自己的天地。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
